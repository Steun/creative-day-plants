/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { Mesh, MeshStandardMaterial, Group } from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'
import { useSpring, animated, config, Globals } from '@react-spring/three'

type GLTFResult = GLTF & {
  nodes: {
    pot: Mesh
    branch1: Mesh
    branch2: Mesh
    leaves: Mesh
  }
  materials: {
    Material: MeshStandardMaterial
    leaves: MeshStandardMaterial
  }
}

export default function Plant({ ...props }: JSX.IntrinsicElements['group']) {
  const [scaleVal, setScaleVal] = useState(1)

  const group = useRef<typeof animated.group>()
  const { nodes, materials } = useGLTF('/plant.glb') as unknown as GLTFResult

  Globals.assign({
    frameLoop: 'always',
  })

  useFrame((state, delta) => (group?.current.rotation.y += 0.01))

  const { scale } = useSpring({
    scale: scaleVal,
    config: config.wobbly,
  })


  return (
    <animated.group ref={group} {...props} dispose={null} scale={scale} onPointerOver={() => setScaleVal(1.3)} onPointerLeave={() => setScaleVal(1)}>
      <mesh castShadow receiveShadow geometry={nodes.pot.geometry} material={nodes.pot.material} />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.branch1.geometry}
        material={nodes.branch1.material}
        position={[-0.05, 0.01, 0]}
        rotation={[0, 0, -0.12]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.branch2.geometry}
        material={nodes.branch2.material}
        position={[0.08, -0.09, 0]}
        rotation={[0, 0, -0.12]}
        scale={[-1, 1, 1]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.leaves.geometry}
        material={materials.leaves}
        position={[0, 2.67, 0]}
        rotation={[0.26, -0.31, -0.02]}
        scale={0.88}
      />
    </animated.group>
  )
}

useGLTF.preload('/plant.glb')
